import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		char[] init = new char[5];
		File file = new File(
				"C:\\Users\\Maksim\\Projects\\MovBox\\NumComparison\\sample_input.txt");
		Scanner sc = new Scanner(file);
		// while (sc.hasNext()) {
		// }
		String a = "31728";
		a = "12378";
		String b = "18211";
		char[] ar = a.toCharArray();
		char[] br = b.toCharArray();
		List list = new List();
		list.put(1);
		list.put(2);
		list.put(3);
		list.put(4);
		list.put(5);
		list.put(6);
		list.put(7);
		list.put(8);
		list.put(9);
		list.print();
		// list.delete(2);
		// list.print();
		// System.out.println(list.get(2));
//		System.out.println(binarySearch(ar, '2'));
		sort(ar, 0, ar.length-1);
	}

	public static int countC(char[] a, char[] b) {
		int result = 0;
		for (int i = 0; i < a.length; i++) {
			if (a[i] == b[i])
				result++;
		}
		return result;
	}

	public static void countD(char[] a, char[] b) {

	}

	public static void mergeSort(char[] arr) {
		sort(arr, 0, arr.length - 1);
	}

	static void sort(char[] arr, int l, int r) {
		if (l < r) {
			int m = (l + r) / 2;
			sort(arr, l, m);
			sort(arr, m + 1, r);
			merge(arr, l, m, r);
		}
	}

	static void merge(char[] arr, int l, int m, int r) {
		int n1 = m + l + 1;
		int n2 = r - m;
		char[] L = new char[n1];
		char[] R = new char[n2];
		for (int i = 0; i < n1; i++)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; j++)
			R[j] = arr[m + l + j];
		int i = 0;
		int j = 0;
		int k = 1;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			} else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	public static boolean binarySearch(char[] input, char val) {
		boolean result = false;
		if (input.length == 0)
			return false;
		if (input.length == 1)
			return input[0] == val;
		if (val < input[0])
			return false;
		if (val > input[input.length - 1])
			return false;
		int l = 0;
		int r = input.length / 2;

		while (true) {
			int mid = (l + r) / 2;
			if (val == input[mid]) {
				input[mid] = 0;
				return true;
			}
			if (val < input[mid]) {
				r = mid;
			} else {
				l = mid;
			}
			return result;
		}
	}

	public static class List {
		Node tail, head;
		int size;

		public List() {
			tail = null;
			head = null;
			size = 0;
		}

		public int get(int index) {
			int result = 0;
			if (index > size - 1)
				return 0;
			if (index == 0)
				return tail.value;
			if (index == size - 1)
				return head.value;
			Node t = tail;
			for (int i = 0; i < index; i++) {
				t = t.next;
			}
			return t.value;

		}

		public void print() {
			Node t = tail;
			String s = "";
			for (int i = 0; i < size; i++) {
				s = s + " " + t.value;
				t = t.next;
			}
			System.out.println(s.trim());
		}

		public void put(int val) {
			Node n = new Node(val);
			if (size == 0) {
				head = n;
				tail = n;
				n.next = n;
				n.prev = n;
			} else {
				head.next = n;
				n.prev = head;
				head = n;
			}
			size++;
		}

		public void delete(Node node) {
			node.prev.next = node.next;
			node.next.prev = node.prev;
		}

		public void delete(int val) {
			Node t = tail;
			if (t.value == val) {
				tail = tail.next;
			}
			while (t.next != null) {
				if (t.next.value == val) {
					t.next = t.next.next;
					size--;
					return;
				}
			}
		}

		public class Node {
			int value;
			Node next, prev;

			public Node(int val) {
				value = val;
			}
		}
	}
}
